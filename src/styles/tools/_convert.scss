/**
 * Tools: convert
 *
 * Value conversion tools.
 */

$base-font-size: 16; // px

/**
 * Transform px value to em.
 *
 * Accepts both unitless and px unit arguments.
 */
@function px2em( $pixels, $context: $base-font-size ) {
	@if ( math.is-unitless( $pixels ) ) {
		$pixels: $pixels * 1px;
	}

	@if ( math.is-unitless( $context ) ) {
		$context: $context * 1px;
	}

	@return $pixels / $context * 1em;
}

/**
 * Transform px value to rem.
 *
 * Accepts both unitless and px unit arguments.
 */
@function px2rem( $pixels, $context: $base-font-size ) {
	@if ( math.is-unitless( $pixels ) ) {
		$pixels: $pixels * 1px;
	}

	@if ( math.is-unitless( $context ) ) {
		$context: $context * 1px;
	}

	@return $pixels / $context * 1rem;
}

/**
 * Convert string to a number.
 *
 * https://gist.github.com/KittyGiraudel/9fa19d254864f33d4a80
 *
 * @param {String | Number} $value - Value to be parsed
 *
 * @return {Number}
 */
@function to-number( $value ) {
	@if type-of( $value ) == 'number' {
		@return $value;
	} @else if type-of( $value ) != 'string' {
		$_: log( 'Value for `to-number` should be a number or a string.' );
	}

	$result: 0;
	$digits: 0;
	$minus: str-slice( $value, 1, 1 ) == '-';
	$numbers: (
		'0': 0,
		'1': 1,
		'2': 2,
		'3': 3,
		'4': 4,
		'5': 5,
		'6': 6,
		'7': 7,
		'8': 8,
		'9': 9,
	);

	@for $i from if( $minus, 2, 1 ) through str-length( $value ) {
		$character: str-slice( $value, $i, $i );

		@if not(
			index( map-keys( $numbers ), $character ) or $character == '.'
		)
		{
			@return to-length(
				if( $minus, -$result, $result ),
				str-slice( $value, $i )
			);
		}

		@if $character == '.' {
			$digits: 1;
		} @else if $digits == 0 {
			$result: $result * 10 + map-get( $numbers, $character );
		} @else {
			$digits: $digits * 10;
			$result: $result + map-get( $numbers, $character ) / $digits;
		}
	}

	@return if( $minus, -$result, $result );
}

/**
 * Add a unit to a value. Used in the to-number function.
 *
 * @param {Number} $value - Value to add unit to
 * @param {String} $unit - String representation of the unit
 *
 * @return {Number} - `$value` expressed in `$unit`
 */
@function to-length( $value, $unit ) {
	$units: (
		'px': 1px,
		'cm': 1cm,
		'mm': 1mm,
		'%': 1%,
		'ch': 1ch,
		'pc': 1pc,
		'in': 1in,
		'em': 1em,
		'rem': 1rem,
		'pt': 1pt,
		'ex': 1ex,
		'vw': 1vw,
		'vh': 1vh,
		'vmin': 1vmin,
		'vmax': 1vmax,
	);

	@if not index( map-keys( $units ), $unit ) {
		$_: log( 'Invalid unit `#{$unit}`.' );
	}

	@return $value * map-get( $units, $unit );
}
